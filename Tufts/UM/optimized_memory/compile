#!/bin/sh
set -e    # halt on first error

link=all  # link all binaries by default
linked=no # track whether we linked

case $1 in  
  -nolink) link=none ; shift ;;  # don't link
  -link)   link="$2" ; shift ; shift ;;  # link only one binary
esac

# the next two lines enable you to compile and link against CII
CIIFLAGS=`pkg-config --cflags cii`
CIILIBS=`pkg-config --libs cii`

# the next three lines enable you to compile and link against course software
CFLAGS="-I. -I/comp/40/include $CIIFLAGS"
LIBS="$CIILIBS -lm -larith40 -l40locality -lnetpbm -lbitpack"    # might add more libraries for some projects
LFLAGS="-L/comp/40/lib64" #-lcii-O2

# these flags max out warnings and debug info
FLAGS="-g -O2 -Wall -Wextra -Werror -Wfatal-errors -std=c99 -pedantic"

rm -f *.o  # make sure no object files are left hanging around

case $# in
  0) set *.c ;; # if no args are given, compile all .c files
esac

# compile each argument to a .o file
for cfile 
do
  gcc $FLAGS $CFLAGS -c $cfile
done

# link together .o files + libraries to make executable binaries
case $link in
  all|um-memory-test) gcc $FLAGS $LFLAGS -o um-memory-test um_memory_tests.o um_memory.o $LIBS 
                  linked=yes ;;
esac

case $link in
  all|um) gcc $FLAGS $LFLAGS -o um main.o um.o um_memory.o $LIBS 
                  linked=yes ;;
esac

case $link in
  all|um-test) gcc $FLAGS $LFLAGS -o um-test um_test.o um.o um_memory.o $LIBS 
                  linked=yes ;;
esac

case $link in
  all|um-test-long) gcc $FLAGS $LFLAGS -o um-test-long um_test_long.o um.o um_memory.o $LIBS 
                  linked=yes ;;
esac

# error if asked to link something we didn't recognize
if [ $linked = no ]; then
  case $link in  # if the -link option makes no sense, complain 
    none) ;; # OK, do nothing
    *) echo "`basename $0`: don't know how to link $link" 1>&2 ; exit 1 ;;
  esac
fi