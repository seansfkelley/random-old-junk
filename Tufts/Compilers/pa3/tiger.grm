(* Sean Kelley and Walker Holahan *)

(* Shift/reduce conflicts were resolved in two ways:
        1. Setting precedence. This was useful for operators and the like, but it was also handy
           in resolving conflicts related to if/then/elses, declarations, and other types of
           expressions. We decided the control flow statements should have low precedence so that
           expressions such as 'if (boolean) then a + b else c + d' operate as the programmer
           would expect: grouping 'else (c + d)' rather than '(if...) + d'.
        2. We also tweaked the grammar in the case of lvalues. This is described in a comment
           below.
*)

structure A = Absyn

(* Extract the lists from their respective expression/declaration types so they can be appended to.
   There must be a proper-ML way to do this, but I do not know it and this works. These are used
   by the semantic actions to build these lists.
   
   Note: these functions cause the compiler to warn about nonexhaustive matches. That's not a problem,
   as we can guarantee that they will only be called with the corresponding type.
*)
   
fun getexplist (A.SeqExp e) = e
fun gettydeclist (A.TypeDec t) = t
fun getfundeclist (A.FunctionDec f) = f

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE
  | UMINUS

%nonterm  program of A.exp
        | decs of A.dec list
        | tydec of A.dec
        | ty of A.ty
        | tyfields of A.field list
        | vardec of A.dec
        | fundec of A.dec
        | exp of A.exp
        | lvalue of A.var
        | expseq of A.exp
        | explist of A.exp list
        | arith of A.exp
        | reclist of (Symbol.symbol * A.exp * pos) list
        | empty

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%nonassoc THEN
%nonassoc ELSE
%nonassoc DO OF
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%right UMINUS
%nonassoc TYPE FUNCTION

%prefer THEN ELSE LPAREN

%%

empty : ()

program : exp (exp)

decs : tydec decs  (tydec :: decs)
     | vardec decs (vardec :: decs)
     | fundec decs (fundec :: decs)
     | empty       ([])

tydec : TYPE ID EQ ty tydec (A.TypeDec({name=Symbol.symbol ID,ty=ty,pos=TYPEleft} :: gettydeclist tydec))
      | TYPE ID EQ ty       (A.TypeDec([{name=Symbol.symbol ID,ty=ty,pos=TYPEleft}]))

vardec : VAR ID ASSIGN exp          (A.VarDec({name=Symbol.symbol ID,escape=ref true,typ=NONE,init=exp,pos=VARleft}))
       | VAR ID COLON ID ASSIGN exp (A.VarDec({name=Symbol.symbol ID1,escape=ref true,typ=SOME (Symbol.symbol ID2,ID2left),init=exp,pos=VARleft}))

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp fundec          (A.FunctionDec({name=Symbol.symbol ID,params=tyfields,result=NONE,body=exp,pos=FUNCTIONleft} :: getfundeclist fundec))
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp fundec (A.FunctionDec({name=Symbol.symbol ID1,params=tyfields,result=SOME (Symbol.symbol ID2, ID2left),body=exp,pos=FUNCTIONleft} :: getfundeclist fundec))
       | FUNCTION ID LPAREN tyfields RPAREN EQ exp                 (A.FunctionDec([{name=Symbol.symbol ID,params=tyfields,result=NONE,body=exp,pos=FUNCTIONleft}]))
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp        (A.FunctionDec([{name=Symbol.symbol ID1,params=tyfields,result=SOME (Symbol.symbol ID2, ID2left),body=exp,pos=FUNCTIONleft}]))

ty : ID                     (A.NameTy(Symbol.symbol ID,IDleft))
   | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
   | ARRAY OF ID            (A.ArrayTy(Symbol.symbol ID,ARRAYleft))

tyfields : ID COLON ID                ([{name=Symbol.symbol ID1,escape=ref true,typ=Symbol.symbol ID2,pos=ID1left}])
         | ID COLON ID COMMA tyfields ({name=Symbol.symbol ID1,escape=ref true,typ=Symbol.symbol ID2,pos=ID1left} :: tyfields)
         | empty                      ([])

exp : lvalue                          (A.VarExp(lvalue))
    | NIL                             (A.NilExp)
    | LPAREN expseq RPAREN            (expseq)
    | INT                             (A.IntExp(INT))
    | STRING                          (A.StringExp(STRING, STRINGleft))
    | arith                           (arith)
    | MINUS exp %prec UMINUS          (A.OpExp({left=A.IntExp(0),oper=A.MinusOp,right=exp,pos=MINUSleft}))
    | ID LPAREN explist RPAREN        (A.CallExp({func=Symbol.symbol ID,args=explist,pos=IDleft}))
    | ID LBRACE reclist RBRACE        (A.RecordExp({fields=reclist,typ=Symbol.symbol ID,pos=IDleft}))
    | ID LBRACK exp RBRACK OF exp     (A.ArrayExp({typ=Symbol.symbol ID,size=exp1,init=exp2,pos=IDleft}))
    | lvalue ASSIGN exp               (A.AssignExp({var=lvalue,exp=exp,pos=ASSIGNleft}))
    | IF exp THEN exp ELSE exp        (A.IfExp({test=exp1,then'=exp2,else'=SOME exp3,pos=IFleft}))
    | IF exp THEN exp                 (A.IfExp({test=exp1,then'=exp2,else'=NONE,pos=IFleft}))
    | WHILE exp DO exp                (A.WhileExp({test=exp1,body=exp2,pos=WHILEleft}))
    | FOR ID ASSIGN exp TO exp DO exp (A.ForExp({var=Symbol.symbol ID,escape=ref true,lo=exp1,hi=exp2,body=exp3,pos=FORleft}))
    | BREAK                           (A.BreakExp(BREAKleft))
    | LET decs IN expseq END          (A.LetExp({decs=decs,body=expseq,pos=LETleft}))

lvalue : ID                       (A.SimpleVar(Symbol.symbol ID,IDleft))
       | lvalue DOT ID            (A.FieldVar(lvalue, Symbol.symbol ID, IDleft))
       | lvalue LBRACK exp RBRACK (A.SubscriptVar(lvalue, exp, LBRACKleft))
       | ID LBRACK exp RBRACK     (A.SubscriptVar(A.SimpleVar(Symbol.symbol ID, IDleft), exp, expleft))

expseq : exp                  (A.SeqExp([(exp, expleft)]))
       | exp SEMICOLON expseq (A.SeqExp((exp, expleft) :: getexplist expseq))
       | empty                (A.SeqExp([]))
  
explist : exp               ([exp])
        | exp COMMA explist (exp :: explist)
        | empty             ([])

arith : exp PLUS exp   (A.OpExp({left=exp1,oper=A.PlusOp,right=exp2,pos=PLUSleft}))
      | exp MINUS exp  (A.OpExp({left=exp1,oper=A.MinusOp,right=exp2,pos=MINUSleft}))
      | exp TIMES exp  (A.OpExp({left=exp1,oper=A.TimesOp,right=exp2,pos=TIMESleft}))
      | exp DIVIDE exp (A.OpExp({left=exp1,oper=A.DivideOp,right=exp2,pos=DIVIDEleft}))
      | exp AND exp    (A.OpExp({left=A.OpExp({left=exp1,oper=A.PlusOp,right=exp2,pos=ANDleft}),oper=A.EqOp,right=A.IntExp(2),pos=ANDleft}))
      | exp OR exp     (A.OpExp({left=A.OpExp({left=exp1,oper=A.PlusOp,right=exp2,pos=ORleft}),oper=A.GeOp,right=A.IntExp(1),pos=ORleft}))
      | exp EQ exp     (A.OpExp({left=exp1,oper=A.EqOp,right=exp2,pos=EQleft}))
      | exp NEQ exp    (A.OpExp({left=exp1,oper=A.NeqOp,right=exp2,pos=NEQleft}))
      | exp LT exp     (A.OpExp({left=exp1,oper=A.LtOp,right=exp2,pos=LTleft}))
      | exp GT exp     (A.OpExp({left=exp1,oper=A.GtOp,right=exp2,pos=GTleft}))
      | exp LE exp     (A.OpExp({left=exp1,oper=A.LeOp,right=exp2,pos=LEleft}))
      | exp GE exp     (A.OpExp({left=exp1,oper=A.GeOp,right=exp2,pos=GEleft}))

reclist : ID EQ exp               ([(Symbol.symbol ID,exp,IDleft)])
        | ID EQ exp COMMA reclist ((Symbol.symbol ID,exp,IDleft) :: reclist)
        | empty                   ([])
